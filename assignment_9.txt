1.
A subquery is a query within a query in which you can use the result from such as a part or supplemental
data to you main query.


2.
You can use a subquery inside a SELECT clause, FROM clause and WHERE clause.


3.
I would use a subquery:
- comparing of data between tables in the same database.
- producing a result in which such result is dependent upon the relations between tables in the same database.
- to produce data from the results of another query.


4.
A row constructor is an expression to build rows in which you will input a set of values without being explicit on which column a certain value belongs to.

5.
The result of the comparison would be NULL and not an empty value.


6.
You can use subquery in a WHERE clause with the use of EXISTS, NOT EXISTS, IN, NOT IN, ALL, SOME and ANY statements.


7.
a.)
schedule=# SELECT employees.full_name AS name, shifts.start_time AS start, shifts.end_time AS endtime FROM employees, shifts WHERE employees.id = shifts.employee_id;
      name       |  start   | endtime
-----------------+----------+----------
 Robert Flame    | 10:00:00 | 19:00:00
 Crazy Taxi      | 12:00:00 | 21:00:00
 Jonathan Bourne | 07:00:00 | 16:00:00
 Cheska Thompson | 09:00:00 | 18:00:00
(4 rows)

b.)
SELECT shifts.start_time, shifts.end_time FROM shifts WHERE EXISTS (SELECT id FROM employees WHERE employees.id = shifts.employee_id);
 start_time | end_time
------------+----------
 07:00:00   | 16:00:00
 10:00:00   | 19:00:00
 09:00:00   | 18:00:00
 12:00:00   | 21:00:00
(4 rows)


8.
dogs table has the columns id, name, gender, age, weight, intake_date, breed, and in_foster
adoptions table has the columns id, adopter, cat, dog, fee, date
adopters table has the columns first_name, last_name, address, and phone number
volunteers table has the columns id, name, address, phone_number, available_to_foster, and foster_id

Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.
a.) SELECT volunteers.name, dog.name FROM volunteers, dogs WHERE dogs.id IN (SELECT dogs.id FROM dogs, volunteers WHERE dogs.id = volunteers.foster_id);

List the adopter’s name and the pet’s name for each animal adopted within the past month to be displayed as a ‘Happy Tail’ on social media.
b.) SELECT adopter, dog, cat FROM adoptions WHERE date = (now() - INTERVAL '30 days');

Create a list of adopters who have not yet chosen a dog to adopt and generate all possible combinations of adopters and available dogs.
c.) SELECT adopter FROM adoptions WHERE EXISTS (SELECT adopter FROM adoptions WHERE adoptions.dog IS NULL);
SELECT adoptions.adopter, adoptions.dog FROM adoptions WHERE dog IN (SELECT name FROM dogs WHERE dogs.in_foster IS NULL);

Display a list of all cats and all dogs who have not been adopted.
d.)
SELECT dogs.name, cats.name FROM dogs, cats WHERE id IN (SELECT foster_id FROM volunteers WHERE foster_id != dogs.id OR cats.id) AND in_foster = 'No';

Create a list of volunteers who are available to foster. If they currently are fostering a dog, include the dog. Also include all dogs who are not currently in foster homes.
e.)
SELECT name, dogs.name FROM volunteers, dogs WHERE volunteers.available_to_roster = 'Yes' AND volunteers.foster_id EXISTS (SELECT id FROM dogs);


9.
cats table has the columns id, name, gender, age, intake_date, adoption_date
adoptions table has the columns id, adopter, cat, dog, fee, date
adopters table has the columns first_name, last_name, address, and phone number

Write a query to find the name of the person who adopted Seashell

SELECT adoptions.adopter FROM adoptions, (SELECT name FROM cats WHERE name = 'Seashell') AS seashell WHERE adoptions.cat = seashell;

10.
books (isbn, title, author)
transactions (id, checked_out_date, checked_in_date, user_id, isbn)
holds (id, isbn, user_id, rank, date)
patrons (id, name, fine_amount),

To discern if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons waiting in line for Harry Potter and the Sorcerer’s Stone.
a.)
SELECT name FROM patrons AS p,
(SELECT holds.user_id AS user_id, books.name AS book_name FROM holds, books WHERE book.isbn = holds.isbn AND book_name = "Harry Potter and the Sorcerer's Stone")
WHERE p.id = user_id ORDER BY p.id;

Make a list of all book titles and denote whether or not a copy of that book is checked out.
b.)
SELECT books.title, check_out_date FROM books, (SELECT isbn, check_out_date FROM transactions) AS t WHERE books.isbn = t.isbn;

In an effort to learn which books take longer to read, the librarians would like you to create a list of total checked out time by book name in the past month.
c.)
SELECT books.name, SUM(DATE_PART('day', transactions.check_in_date) - DATE_PART('day', transactions.check_out_date)) AS total_check_out FROM books, transactions
WHERE books.isbn IN (SELECT isbn FROM transactions);

In order to learn which items should be retired, make a list of all books that have not been checked out in the past 5 years.
d.)
SELECT books.name FROM books WHERE EXISTS (SELECT isbn FROM transactions WHERE check_out_date = DATE_PART('year', now()) - DATE_PART('year', now() - INTERVAL '5 Years') AND books.isbn = transactions.isbn);


List all of the library patrons. If they have one or more books checked out, correspond the books to the patrons.
e.)
SELECT patrons.name, books.name FROM patrons, books WHERE books.isbn IN (SELECT isbn FROM transactions, holds WHERE COUNT(holds.isbn) >= 1 AND holds.isbn = transactions.isbn);


11.
airplanes (model, seat capacity, range)
flights(flight_number, destination, origin, company, distance, flight_time, airplane_model)
transactions(id, seats_sold, total_revenue, total_cost, flight_number, date)


To determine the most profitable airplanes, find all airplane models where each flight has had over 100 paying customers in the past month.
a.)
SELECT airplanes.model FROM airplanes WHERE model IN
(SELECT airplane_model FROM flights, transactions AS t WHERE t.seats_sold > 100 AND date = DATE_PART('month', now()) - DATE_PART('month', now() - INTERVAL '1 month'))
AND t.flight_number = flights.flight_number);

To determine the most profitable flights, find all destination-origin pairs where 90% or more of the seats have been sold in the past month.
b.)
SELECT destination, origin FROM flights WHERE flights.flight_number IN (SELECT flight_number, ROUND(100.0 * (SUM(seats_sold)/COUNT(seats_sold)), 2) AS percent FROM transactions WHERE percent >= 90 GROUP BY flight_number);


The airline is looking to expand its presence in the US Southeast and globally. Find the total revenue of any flight arriving at or departing from Atlanta.
c.)
SELECT total_revenue FROM transactions, (SELECT flight_number AS fl FROM flights WHERE destination = 'Atlanta' AND Origin = 'Atlanta') WHERE transactions.flight_number = fl;


12.
For me, JOIN statements are more readable. JOIN statements does not require a lot of writing to come up with a result. With subqueries, since you are nesting queries on top of another query, things
can get confusing quite easily. With JOIN statements you can compare columns with ON statement to obtain a result. With subqueries, you do not have that option.
